name: Build Packer on Push

on:
  push:
    branches:
      - main

jobs:
  build-packer:
    runs-on: ubuntu-latest

    steps:
      - name: Echo Message
        run: echo "Push event detected on the main branch."

      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          create_credentials_file: true
          export_environment_variables: true
          universe: googleapis.com
          cleanup_credentials: true
          access_token_lifetime: 3600s
          access_token_scopes: https://www.googleapis.com/auth/cloud-platform
          id_token_include_email: false

      - name: Set up Google Cloud CLI
        uses: google-github-actions/setup-gcloud@v2
        with:
          version: "latest"
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          export_default_credentials: true

      - name: Install modules
        run: npm install

      - name: Setup Packer
        uses: hashicorp/setup-packer@main
        id: setup
        with:
          version: "latest"

      - name: Packer init
        run: packer init ami.pkr.hcl

      - name: Build Artifact
        run: zip -r webapp.zip . -x ".git*" -x ".github*"

      - name: Publish Web App Artifact
        uses: actions/upload-artifact@v2
        with:
          name: webapp
          path: webapp.zip

      - name: check path
        run: |
          pwd
          ls /home/runner/work/webapp/webapp

      - name: Build Image on GCP
        env:
          PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
          IMAGE_FAMILY: "centos-stream-8"
          IMAGE_PROJECT: "centos-cloud"
          CUSTOM_IMAGE_FAMILY: "csye6225-custom-image-family"
          CUSTOM_IMAGE_NAME: "csye6225-custom-image"
          MACHINE_TYPE: "n1-standard-2"
          DISK_SIZE: "100"
          ZONE: "us-east1-b"
        run: |
          packer build -var "project_id=${PROJECT_ID}" -var "image_family=${IMAGE_FAMILY}" -var "image_project=${IMAGE_PROJECT}" \
                       -var "custom_image_family=${CUSTOM_IMAGE_FAMILY}" -var "custom_image_name=${CUSTOM_IMAGE_NAME}" \
                       -var "machine_type=${MACHINE_TYPE}" -var "disk_size=${DISK_SIZE}" -var "zone=${ZONE}" \
                       ami.pkr.hcl

      - name: Extract Image ID from manifest
        run: |
          IMAGE_ID=$(jq -r '.builds[-1].artifact_id' manifest.json)
          echo "Image ID: $IMAGE_ID"
          echo "IMAGE_ID=${IMAGE_ID}" >> $GITHUB_ENV

      - name: Prepare startup script
        run: |
          cat << 'EOF' > startup-script.sh
           #!/bin/bash

           #Fetch metadata parameters
           DB_USER=$(curl "http://metadata.google.internal/computeMetadata/v1/instance/attributes/db_user" -H "Metadata-Flavor: Google")
           DB_PASSWORD=$(curl "http://metadata.google.internal/computeMetadata/v1/instance/attributes/db_password" -H "Metadata-Flavor: Google")
           DB_HOST=$(curl "http://metadata.google.internal/computeMetadata/v1/instance/attributes/db_host" -H "Metadata-Flavor: Google")
           DB_NAME=$(curl "http://metadata.google.internal/computeMetadata/v1/instance/attributes/db_name" -H "Metadata-Flavor: Google")
           # Ensure /opt/webapp directory exists
           mkdir -p /opt/webapp

          echo "HOST='${{ secrets.GCP_MYSQL_HOST }}'" > /opt/webapp/.env
          echo "DBPORT=5432" >> /opt/webapp/.env
          echo "DBNAME='${{ secrets.GCP_MYSQL_DBNAME }}'" >> /opt/webapp/.env
          echo "DBUSER='${{ secrets.GCP_MYSQL_DBUSER }}'" >> /opt/webapp/.env
          echo "DBPASSWORD='${{ secrets.GCP_MYSQL_PASSWORD }}'" >> /opt/webapp/.env
          sudo systemctl start kas.service
          EOF

      - name: Create new Instance Template version
        id: create_template
        run: |
          TEMPLATE_NAME="my-template-$(date +%Y%m%d%H%M%S)"
          IMAGE_PROJECT="${{ secrets.GCP_PROJECT_ID }}"
          gcloud compute instance-templates create $TEMPLATE_NAME \
            --project=$IMAGE_PROJECT \
            --image=$IMAGE_ID \
            --machine-type=e2-medium \
            --tags=application \
            --boot-disk-auto-delete \
            --boot-disk-size=50 \
            --boot-disk-type=pd-balanced \
            --boot-disk-kms-keyring=${{ secrets.GCP_Key_ring }} \
            --boot-disk-kms-key=${{ secrets.GCP_kms_Key }} \
            --instance-template-region=us-east1 \
            --region=us-east1 \
            --network=${{ secrets.GCP_VPC }} \
            --subnet=${{ secrets.GCP_SUBNET }} \
            --service-account=ops-agent-service-account@tf-gcp-infra-project.iam.gserviceaccount.com \
            --scopes=logging-write,monitoring-write,https://www.googleapis.com/auth/pubsub \
            --metadata=DBUSER=${{ secrets.GCP_MYSQL_DBUSER }},DBPASSWORD="${{ secrets.GCP_MYSQL_PASSWORD }}",HOST=${{ secrets.GCP_MYSQL_HOST }},DBNAME=${{ secrets.GCP_MYSQL_DBNAME }} \
            --metadata-from-file=startup-script=startup-script.sh
          echo "New template $TEMPLATE_NAME created with image $IMAGE_ID"
          echo "::set-output name=template_name::$TEMPLATE_NAME"

      - name: Update Managed Instance Group
        run: |
          gcloud compute instance-groups managed set-instance-template "my-instance-group-manager" \
            --project=${{ secrets.GCP_PROJECT_ID }} \
            --template=projects/tf-gcp-infra-project/regions/us-east1/instanceTemplates/${{ steps.create_template.outputs.template_name }} \
            --region="us-east1"

      - name: Start rolling update
        run: |
          gcloud compute instance-groups managed rolling-action start-update "my-instance-group-manager" \
            --project=${{ secrets.GCP_PROJECT_ID }} \
            --version=template=projects/${{ secrets.GCP_PROJECT_ID }}/regions/us-east1/instanceTemplates/${{ steps.create_template.outputs.template_name }} \
            --region="us-east1" \
            --max-unavailable=0

      - name: Wait for Update to Complete
        run: |
          gcloud compute instance-groups managed wait-until "my-instance-group-manager" \
            --project=${{ secrets.GCP_PROJECT_ID }} \
            --version-target-reached \
            --region="us-east1"

      - name: Waiting for instance group to get stable
        run: |
          gcloud compute instance-groups managed wait-until "my-instance-group-manager" --stable --region=us-east1 --project=${{ secrets.GCP_PROJECT_ID }}
